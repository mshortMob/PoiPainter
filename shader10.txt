precision mediump float;
precision mediump int;

uniform float time;
uniform vec2 resolution;
varying vec2 vUv;
//-----------------------------------

mat4 rotationMatrix(vec3 axis, float angle)
{
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;

	return mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,
		oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,
		oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,
		0.0, 0.0, 0.0, 1.0);
}

vec3 rotate(vec3 v, vec3 axis, float angle)
{
	mat4 m = rotationMatrix(axis, angle);
	return (m * vec4(v, 1.0)).xyz;
}



void main(void){
	
	vec2 p = -1.0 + 2.0*vUv;
	
	p = rotate(vec3(p.xy,0.), vec3(1.,1.,1.), sin(time)).xy;
	
	vec3 color1 = vec3(0.0, 0.3, 0.5);
	vec3 color2 = vec3(0.5, 0.0, 0.3);
	
	float f = 0.0;
	float g = 0.0;
	float h = 0.0;
	float PI = 3.14159265;
	for(float i = 0.0; i < 80.0; i++){
	
		float s = sin(time + i * PI / 20.0) * 0.8;
		float c = tan(time + i * 0.1 * PI / 20.0) * 0.8;
		float d = abs(p.x + c);
		float e = abs(p.y + s);
		f += 0.001 / d;
		g += 0.001 / e;
		h += 0.00003 / (d * e);
	}
	
	gl_FragColor = vec4(f * color1 + g * color2 + vec3(h), 1.0);
}