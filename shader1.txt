precision mediump float;
precision mediump int;

uniform float time;
varying vec2 vUv;

float triangle (vec2 st,
	vec2 p0, vec2 p1, vec2 p2,
	float smoothness){
	vec3 e0, e1, e2;
	e0.xy = normalize(p1 - p0).yx * vec2(+1.0, -1.0);
	e1.xy = normalize(p2 - p1).yx * vec2(+1.0, -1.0);
	e2.xy = normalize(p0 - p2).yx * vec2(+1.0, -1.0);
	e0.z = dot(e0.xy, p0) - smoothness;
	e1.z = dot(e1.xy, p1) - smoothness;
	e2.z = dot(e2.xy, p2) - smoothness;
	float a = max(0.0, dot(e0.xy, st) - e0.z);
	float b = max(0.0, dot(e1.xy, st) - e1.z);
	float c = max(0.0, dot(e2.xy, st) - e2.z);
	return smoothstep(smoothness * 2.0, 1e-7, length(vec3(a, b, c)));
}

void main(){
	vec2 st = vUv;

	vec3 color1 = vec3( triangle(st, vec2(0.2,0.0), vec2(0.8,0.0), vec2(0.5,1.0), 0.001) );
	vec3 color2 = vec3( triangle(st, vec2(0.6,1.0), vec2(0.9,0.0), vec2(1.0,1.0), 0.001) );
	vec3 color3 = vec3( triangle(st, vec2(0.0,1.0), vec2(0.1,0.0), vec2(0.4,1.0), 0.001) );
    vec3 color=color1+color2+color3;

	vec2 position = - 1.0 + 2.0 * vUv;
	float red = abs( sin( position.x * position.y - time / 2.0 ) );
	float green = abs( sin( position.x * position.y + time / 4.0 ) );
	float blue = abs( sin( position.x * position.y + time / 3.0 ) );
	
	gl_FragColor = vec4( color.x*red*.7, color.y*green-.7, color.z*blue*1.2, 1.0 );
}